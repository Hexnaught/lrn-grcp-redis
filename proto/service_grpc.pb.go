// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BasicServiceClient is the client API for BasicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicServiceClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ServerResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ServerResponse, error)
}

type basicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicServiceClient(cc grpc.ClientConnInterface) BasicServiceClient {
	return &basicServiceClient{cc}
}

func (c *basicServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/proto.BasicService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/proto.BasicService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/proto.BasicService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicServiceServer is the server API for BasicService service.
// All implementations must embed UnimplementedBasicServiceServer
// for forward compatibility
type BasicServiceServer interface {
	Set(context.Context, *SetRequest) (*ServerResponse, error)
	Get(context.Context, *GetRequest) (*ServerResponse, error)
	Delete(context.Context, *DeleteRequest) (*ServerResponse, error)
	mustEmbedUnimplementedBasicServiceServer()
}

// UnimplementedBasicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasicServiceServer struct {
}

func (UnimplementedBasicServiceServer) Set(context.Context, *SetRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedBasicServiceServer) Get(context.Context, *GetRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBasicServiceServer) Delete(context.Context, *DeleteRequest) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBasicServiceServer) mustEmbedUnimplementedBasicServiceServer() {}

// UnsafeBasicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicServiceServer will
// result in compilation errors.
type UnsafeBasicServiceServer interface {
	mustEmbedUnimplementedBasicServiceServer()
}

func RegisterBasicServiceServer(s grpc.ServiceRegistrar, srv BasicServiceServer) {
	s.RegisterService(&_BasicService_serviceDesc, srv)
}

func _BasicService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BasicService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BasicService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BasicService",
	HandlerType: (*BasicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _BasicService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BasicService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BasicService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
